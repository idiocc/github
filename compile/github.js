#!/usr/bin/env node
             
const querystring = require('querystring');
const https = require('https');
const http = require('http');
const util = require('util');
const url = require('url');
const os = require('os');
const zlib = require('zlib');
const stream = require('stream');             const w=https.request;const A=http.request;const B=util.debuglog;const C=(a,b=0,c=!1)=>{if(0===b&&!c)return a;a=a.split("\n",c?b+1:void 0);return c?a[a.length-1]:a.slice(b).join("\n")},D=(a,b=!1)=>C(a,2+(b?1:0)),E=a=>{({callee:{caller:a}}=a);return a};const H=os.homedir;const I=/\s+at.*(?:\(|\s)(.*)\)?/,J=/^(?:(?:(?:node|(?:internal\/[\w/]*|.*node_modules\/(?:IGNORED_MODULES)\/.*)?\w+)\.js:\d+:\d+)|native)/,K=H(),L=a=>{const {pretty:b=!1,ignoredModules:c=["pirates"]}={},f=new RegExp(J.source.replace("IGNORED_MODULES",c.join("|")));return a.replace(/\\/g,"/").split("\n").filter(d=>{d=d.match(I);if(null===d||!d[1])return!0;d=d[1];return d.includes(".app/Contents/Resources/electron.asar")||d.includes(".app/Contents/Resources/default_app.asar")?!1:!f.test(d)}).filter(d=>
d.trim()).map(d=>b?d.replace(I,(g,l)=>g.replace(l,l.replace(K,"~"))):d).join("\n")};function M(a,b,c=!1){return function(f){var d=E(arguments),{stack:g}=Error();const l=C(g,2,!0),m=(g=f instanceof Error)?f.message:f;d=[`Error: ${m}`,...null!==d&&a===d||c?[b]:[l,b]].join("\n");d=L(d);return Object.assign(g?f:Error(),{message:m,stack:d})}};function N(a){var {stack:b}=Error();const c=E(arguments);b=D(b,a);return M(c,b,a)};const O=url.parse;const P=stream.Writable;const Q=(a,b)=>{b.once("error",c=>{a.emit("error",c)});return b};class R extends P{constructor(a){const {binary:b=!1,rs:c=null,...f}=a||{},{a:d=N(!0),proxyError:g}=a||{},l=(m,n)=>d(n);super(f);this.b=[];this.i=new Promise((m,n)=>{this.on("finish",()=>{let h;b?h=Buffer.concat(this.b):h=this.b.join("");m(h);this.b=[]});this.once("error",h=>{if(-1==h.stack.indexOf("\n"))l`${h}`;else{const u=L(h.stack);h.stack=u;g&&l`${h}`}n(h)});c&&Q(this,c).pipe(this)})}_write(a,b,c){this.b.push(a);c()}get c(){return this.i}}
const S=async(a,b={})=>{({c:a}=new R({rs:a,...b,a:N(!0)}));return await a};const T=zlib.createGunzip;const U=(a,b,c={})=>{const {justHeaders:f,binary:d,a:g=N(!0)}=c;let l,m,n,h,u=0,v=0;c=(new Promise((e,p)=>{l=a(b,async k=>{({headers:m}=k);n={statusMessage:k.statusMessage,statusCode:k.statusCode};if(f)k.destroy();else{var q="gzip"==k.headers["content-encoding"];k.on("data",t=>u+=t.byteLength);k=q?k.pipe(T()):k;h=await S(k,{binary:d});v=h.length}e()}).on("error",k=>{k=g(k);p(k)}).on("timeout",()=>{l.abort()})})).then(()=>({body:h,headers:m,...n,j:u,byteLength:v,g:null}));return{req:l,c}};const aa=(a={})=>Object.keys(a).reduce((b,c)=>{const f=a[c];c=`${encodeURIComponent(c)}=${encodeURIComponent(f)}`;return[...b,c]},[]).join("&").replace(/%20/g,"+"),ba=async(a,b,{data:c,justHeaders:f,binary:d,a:g=N(!0)})=>{const {req:l,c:m}=U(a,b,{justHeaders:f,binary:d,a:g});l.end(c);a=await m;if((a.headers["content-type"]||"").startsWith("application/json")&&a.body)try{a.g=JSON.parse(a.body)}catch(n){throw g=g(n),g.response=a.body,g;}return a};let V;try{const {version:a,name:b}=require("../package.json");V="@rqt/aqt"==b?`@rqt/aqt/${a}`:`@rqt/aqt via ${b}/${a}`}catch(a){V="@aqt/rqt"}
const ca=B("aqt"),fa=async(a,b={})=>{const {data:c,type:f="json",headers:d={"User-Agent":`Mozilla/5.0 (Node.JS) ${V}`},compress:g=!0,binary:l=!1,justHeaders:m=!1,method:n,timeout:h}=b;b=N(!0);const {hostname:u,protocol:v,port:e,path:p}=O(a),k="https:"===v?w:A,q={hostname:u,port:e,path:p,headers:{...d},timeout:h,method:n};if(c){var t=f;var r=c;switch(t){case "json":r=JSON.stringify(r);t="application/json";break;case "form":r=aa(r),t="application/x-www-form-urlencoded"}r={data:r,contentType:t};({data:t}=
r);r=r.contentType;q.method=n||"POST";"Content-Type"in q.headers||(q.headers["Content-Type"]=r);"Content-Length"in q.headers||(q.headers["Content-Length"]=Buffer.byteLength(t))}!g||"Accept-Encoding"in q.headers||(q.headers["Accept-Encoding"]="gzip, deflate");const {body:y,headers:z,byteLength:x,statusCode:da,statusMessage:ea,j:F,g:G}=await ba(k,q,{data:t,justHeaders:m,binary:l,a:b});ca("%s %s B%s",a,x,`${x!=F?` (raw ${F} B)`:""}`);return{body:G?G:y,headers:z,statusCode:da,statusMessage:ea}};const W=async(a,b={})=>{({body:a}=await fa(a,b));return a};const X=querystring.stringify;const ha=async(a,b,c,f)=>{a.session.token=b;a.session.scope=c;a.session.user=f;await a.session.manuallyCommit();a.redirect("/")};const ia=async a=>await Y({h:a,path:"user"}),ja=async a=>await Y({h:a,path:"user/emails"}),Y=async a=>{var b=a.h;const c=`https://api.github.com/${a.path}`;a=X(a.data);b=await W(`${c}?${a}`,{headers:{Authorization:`token ${b}`,Accept:"application/json","User-Agent":"@idio/github http://github.com/idiocc/github"}});if(b.message)throw Error(b.message);return b},ka=async({code:a,client_id:b,client_secret:c,f,state:d})=>{const {access_token:g,scope:l,token_type:m,error:n,error_description:h}=await W("https://github.com/login/oauth/access_token",
{data:{code:a,redirect_uri:f,client_id:b,client_secret:c,...d?{state:d}:{}},headers:{Accept:"application/json"}});if(n)throw a=Error(h),a.type=n,a;return{access_token:g,scope:l,token_type:m}},la=({f:a,client_id:b,scope:c,state:f})=>`https://www.github.com/login/oauth/authorize?${X({client_id:b,redirect_uri:a,...f?{state:f}:{},...c?{scope:c}:{}})}`,Z=({protocol:a,host:b},c)=>[/\.ngrok\.io$/.test(b)?"https":a,"://",b,c].join("");module.exports={_github:function(a,b){if(!b)throw Error("Config with at least client_id and client_secret is required.");const {client_id:c="",client_secret:f="",path:d="/auth/github",redirectPath:g=`${d}/redirect`,scope:l="",error:m=(e,p,k)=>{throw Error(k);},finish:n=ha,session:h}=b;c||console.warn("[github] No client id - the dialog won't work.");f||console.warn("[github] No client secret - the redirect won't work.");const u=async e=>{if(!e.session)throw Error("Cannot start github middleware because session was not started.");
var p=Math.floor(1E4*Math.random());e.session["githib-state"]=p;await e.session.manuallyCommit();p=la({f:Z(e,g),client_id:c,scope:l,state:p});e.redirect(p)},v=async(e,p)=>{var k=Z(e,g);let q;if(!e.session)throw Error("Cannot finish github middleware because session was not started.");q=e.query.state;if(q!=e.session["githib-state"])throw Error("The state is incorrect.");e.session["githib-state"]=null;await e.session.manuallyCommit();if(e.query.error)await m(e,e.query.error,e.query.error_description,
p);else{var t=e.query.code;if(!t)throw Error("Code Not Found.");var {access_token:r,scope:y}=await ka({client_id:c,client_secret:f,f:k,code:t,state:q});k=[ia(r),.../user:email/.test(y)?[ja(r)]:[]];var [z,x]=await Promise.all(k);x&&(z.emails=x);await n(e,r,y,z,p)}};a.use(async(e,p)=>{if(e.path==d)h&&await h(e,()=>{}),await u(e);else if(e.path.startsWith(g))h&&await h(e,()=>{}),await v(e,p);else return p()})}};

//# sourceMappingURL=github.js.map